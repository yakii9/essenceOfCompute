# Autogenerated from a Treetop grammar. Edits may be lost.


module Simple
  include Treetop::Runtime

  def root
    @root ||= :statement
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        node_cache[:statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_while
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_assign
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module While0
    def condition
      elements[1]
    end

    def body
      elements[3]
    end

  end

  module While1
    def to_ast
      While.new(condition.to_ast, body.to_ast)
    end
  end

  def _nt_while
    start_index = index
    if node_cache[:while].has_key?(index)
      cached = node_cache[:while][index]
      if cached
        node_cache[:while][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('while (', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'while (\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_expression
      s0 << r2
      if r2
        if (match_len = has_terminal?(') { ', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\') { \'')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_statement
          s0 << r4
          if r4
            if (match_len = has_terminal?(' }', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\' }\'')
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(While0)
      r0.extend(While1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:while][start_index] = r0

    r0
  end

  module Assign0
    def name
      elements[0]
    end

    def expression
      elements[2]
    end
  end

  module Assign1
    def to_ast
      Assign.new(name.text_value.to_sym, expression.to_ast)
    end
  end

  def _nt_assign
    start_index = index
    if node_cache[:assign].has_key?(index)
      cached = node_cache[:assign][index]
      if cached
        node_cache[:assign][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-z]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[a-z]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?(' = ', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\' = \'')
        r3 = nil
      end
      s0 << r3
      if r3
        r4 = _nt_expression
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Assign0)
      r0.extend(Assign1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assign][start_index] = r0

    r0
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        node_cache[:expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_less_then

    node_cache[:expression][start_index] = r0

    r0
  end

  module LessThen0
    def left
      elements[0]
    end

    def right
      elements[2]
    end
  end

  module LessThen1
    def to_ast
      LessThan.new(left.to_ast, right.to_ast)
    end
  end

  def _nt_less_then
    start_index = index
    if node_cache[:less_then].has_key?(index)
      cached = node_cache[:less_then][index]
      if cached
        node_cache[:less_then][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_multiply
    s1 << r2
    if r2
      if (match_len = has_terminal?(' < ', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\' < \'')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_less_then
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(LessThen0)
      r1.extend(LessThen1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r5 = _nt_multiply
      if r5
        r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:less_then][start_index] = r0

    r0
  end

  module Multiply0
    def left
      elements[0]
    end

    def right
      elements[2]
    end
  end

  module Multiply1
    def to_ast
      Multiply.new(left.to_ast, right.to_ast)
    end
  end

  def _nt_multiply
    start_index = index
    if node_cache[:multiply].has_key?(index)
      cached = node_cache[:multiply][index]
      if cached
        node_cache[:multiply][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_term
    s1 << r2
    if r2
      if (match_len = has_terminal?(' * ', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\' * \'')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_multiply
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Multiply0)
      r1.extend(Multiply1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r5 = _nt_term
      if r5
        r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:multiply][start_index] = r0

    r0
  end

  def _nt_term
    start_index = index
    if node_cache[:term].has_key?(index)
      cached = node_cache[:term][index]
      if cached
        node_cache[:term][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_num
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_variable
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:term][start_index] = r0

    r0
  end

  module Num0
    def to_ast
      Num.new(text_value.to_i)
    end
  end

  def _nt_num
    start_index = index
    if node_cache[:num].has_key?(index)
      cached = node_cache[:num][index]
      if cached
        node_cache[:num][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Num0)
      r0.extend(Num0)
    end

    node_cache[:num][start_index] = r0

    r0
  end

  module Variable0
    def to_ast
      Variable.new(text_value.to_sym)
    end
  end

  def _nt_variable
    start_index = index
    if node_cache[:variable].has_key?(index)
      cached = node_cache[:variable][index]
      if cached
        node_cache[:variable][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-z]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[a-z]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Variable0)
      r0.extend(Variable0)
    end

    node_cache[:variable][start_index] = r0

    r0
  end

end

class SimpleParser < Treetop::Runtime::CompiledParser
  include Simple
end

